Index: src/main/kotlin/co/edu/uniquindio/compiladores/proyecto/prueba/Aplicacion.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package co.edu.uniquindio.compiladores.proyecto\r\n\r\nimport co.edu.uniquindio.compiladores.proyecto.lexico.AnalizadorLexico\r\n\r\nfun main() {\r\n\r\n    val lexico = AnalizadorLexico(\"\")\r\n    lexico.analizar()\r\n    print(lexico.listaTokens)\r\n}\r\n//    fun esPrimo(numero: Int): Boolean {\r\n//        for (i in 2..numero / 2) {\r\n//            if (numero % i == 0) {\r\n//                return false;\r\n//            }\r\n//        }\r\n//        return true\r\n//    }\r\n//\r\n//    fun esPrimo(numero: Int, i: Int): Boolean {\r\n//        return if (numero / 2 < i) {\r\n//            true\r\n//        } else if (numero % i == 0) {\r\n//            false\r\n//        } else {\r\n//            esPrimo(numero, i + 1)\r\n//        }\r\n//\r\n//    }\r\n//\r\n//    fun operar(a: Int, b: Int, fn: (Int, Int) -> Int): Int {\r\n//        return fn(a, b)\r\n//    }\r\n//\r\n//    fun sumar(a: Int, b: Int) = a + b\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/kotlin/co/edu/uniquindio/compiladores/proyecto/prueba/Aplicacion.kt b/src/main/kotlin/co/edu/uniquindio/compiladores/proyecto/prueba/Aplicacion.kt
--- a/src/main/kotlin/co/edu/uniquindio/compiladores/proyecto/prueba/Aplicacion.kt	(revision 8837f3e9aa1f241b7e3775216163f5baf48ea37b)
+++ b/src/main/kotlin/co/edu/uniquindio/compiladores/proyecto/prueba/Aplicacion.kt	(date 1665265828243)
@@ -7,29 +7,4 @@
     val lexico = AnalizadorLexico("")
     lexico.analizar()
     print(lexico.listaTokens)
-}
-//    fun esPrimo(numero: Int): Boolean {
-//        for (i in 2..numero / 2) {
-//            if (numero % i == 0) {
-//                return false;
-//            }
-//        }
-//        return true
-//    }
-//
-//    fun esPrimo(numero: Int, i: Int): Boolean {
-//        return if (numero / 2 < i) {
-//            true
-//        } else if (numero % i == 0) {
-//            false
-//        } else {
-//            esPrimo(numero, i + 1)
-//        }
-//
-//    }
-//
-//    fun operar(a: Int, b: Int, fn: (Int, Int) -> Int): Int {
-//        return fn(a, b)
-//    }
-//
-//    fun sumar(a: Int, b: Int) = a + b
+}
\ No newline at end of file
