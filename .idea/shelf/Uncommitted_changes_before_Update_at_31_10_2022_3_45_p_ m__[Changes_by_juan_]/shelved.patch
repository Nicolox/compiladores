Index: src/main/kotlin/co/edu/uniquindio/compiladores/proyecto/lexico/AnalizadorLexico.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package co.edu.uniquindio.compiladores.proyecto.lexico\r\n\r\nclass AnalizadorLexico(var codigoFuente: String) {\r\n\r\n    var posicionActual = 0\r\n    var caracterActual = codigoFuente[0]\r\n    var listaTokens = ArrayList<Token>()\r\n    var finCodigo = 0.toChar()\r\n    var filaActual = 0\r\n    var columnaActual = 0\r\n    var listaPalabrasReservadas = listOf(\r\n        \"etr\",\r\n        \"rls\",\r\n        \"cdn\",\r\n        \"crt\",\r\n        \"dsc\",\r\n        \"crc\",\r\n        \"cls\",\r\n        \"return\",\r\n        \"print\",\r\n        \"true\"\r\n    )\r\n\r\n    fun almacenarToken(lexema: String, cat: Categoria, fila: Int, columna: Int) =\r\n        listaTokens.add(Token(lexema, cat, fila, columna))\r\n\r\n    fun hacerBT(posicionInicial: Int, filaInicial: Int, columnaInicial: Int) {\r\n        posicionActual = posicionInicial\r\n        filaActual = filaInicial\r\n        columnaActual = columnaInicial\r\n\r\n        caracterActual = codigoFuente[posicionActual]\r\n    }\r\n\r\n    fun analizar() {\r\n\r\n        while (caracterActual != finCodigo) {\r\n\r\n            if (caracterActual == ' ' || caracterActual == '\\t' || caracterActual == '\\n') {\r\n                obtenerSiguienteCaracter()\r\n                continue\r\n            }\r\n\r\n\r\n\r\n            if (esIncremento()) continue\r\n            if (esDecremento()) continue\r\n            if (esEntero()) continue\r\n            if (esDecimal()) continue\r\n            if (esParentesisDer()) continue\r\n            if (esParentesisIzq()) continue\r\n            if (esLlaveDer()) continue\r\n            if (esLlaveIzq()) continue\r\n            if (esCorcheteIzq()) continue\r\n            if (esCorcheteDer()) continue\r\n            if (esFinSentencia()) continue\r\n            if (esComa()) continue\r\n            if (esPunto()) continue\r\n            //           if (esDosPunto()) continue\r\n            if (esIdentificadorVariable()) continue\r\n            if (esIdentificadorClase()) continue\r\n            if (esIdentificadorMetodos()) continue\r\n            if (esCadenaCaracteres()) continue\r\n            if (esComentarioBloque()) continue\r\n            if (esComentarioLinea()) continue\r\n            if (esPalabraReservada()) continue\r\n            if (isOperadorAritmetico()) continue\r\n            if (esOperadorLogico()) continue\r\n            if (isOperadorAsignacion()) continue\r\n            if (esOperadorRelacional()) continue\r\n\r\n            almacenarToken(\"\" + caracterActual, Categoria.DESCONOCIDO, filaActual, columnaActual)\r\n            obtenerSiguienteCaracter()\r\n        }\r\n    }\r\n\r\n    //Automata para determinar si es un número entero\r\n    fun esEntero(): Boolean {\r\n        if (caracterActual == '[') {\r\n            var lexema = \"\"\r\n            val filaInicial = filaActual\r\n            val columnaInicial = columnaActual\r\n            val posicionInicial = posicionActual\r\n\r\n            lexema += caracterActual\r\n            obtenerSiguienteCaracter()\r\n            while (caracterActual.isDigit()) {\r\n                lexema += caracterActual\r\n                obtenerSiguienteCaracter()\r\n            }\r\n            if (caracterActual == ']') {\r\n                lexema += caracterActual\r\n                obtenerSiguienteCaracter()\r\n                almacenarToken(lexema, Categoria.ENTERO, filaInicial, columnaInicial)\r\n                return true\r\n            } else {\r\n                hacerBT(posicionInicial, filaInicial, columnaInicial)\r\n                return false\r\n            }\r\n\r\n        }\r\n        return false\r\n    }\r\n\r\n    fun esDecimal(): Boolean {\r\n        if (caracterActual == '<') {\r\n            var lexema = \"\"\r\n            val columnaInicial = columnaActual\r\n            val posicionInicial = posicionActual\r\n            val filaInicial = filaActual\r\n\r\n            lexema += caracterActual\r\n            obtenerSiguienteCaracter()\r\n            if (caracterActual.isDigit()) {\r\n                lexema += caracterActual\r\n                obtenerSiguienteCaracter()\r\n\r\n                while (caracterActual.isDigit()) {\r\n                    lexema += caracterActual\r\n                    obtenerSiguienteCaracter()\r\n                }\r\n                if (caracterActual == '.') {\r\n                    lexema += caracterActual\r\n                    obtenerSiguienteCaracter()\r\n\r\n                    while (caracterActual.isDigit()) {\r\n                        lexema += caracterActual\r\n                        obtenerSiguienteCaracter()\r\n                    }\r\n                }\r\n                return if (caracterActual == '>') {\r\n                    lexema += caracterActual\r\n                    obtenerSiguienteCaracter()\r\n                    almacenarToken(lexema, Categoria.DECIMAL, filaInicial, columnaInicial)\r\n                    true\r\n                } else {\r\n                    hacerBT(posicionInicial, filaInicial, columnaInicial)\r\n                    false\r\n                }\r\n            }\r\n        }\r\n        return false\r\n    }\r\n    //Automata para determinar si es un identificador de variable\r\n    fun esIdentificadorVariable(): Boolean {\r\n        if (caracterActual == '#') {\r\n            var lexema = \"\"\r\n            val filaInicial = filaActual\r\n            val columnaInicial = columnaActual\r\n            val posicionInicial = posicionActual\r\n            var cantidadCaracteres = 0\r\n\r\n            lexema += caracterActual\r\n            obtenerSiguienteCaracter()\r\n            while (caracterActual.isDigit() || caracterActual.isLetter() || caracterActual == '_') {\r\n                lexema += caracterActual\r\n                obtenerSiguienteCaracter()\r\n                cantidadCaracteres++\r\n            }\r\n            return if (caracterActual == '#' && cantidadCaracteres <= 10) {\r\n                lexema += caracterActual\r\n                obtenerSiguienteCaracter()\r\n                almacenarToken(lexema, Categoria.IDENTIFICADOR_VARIABLE, filaInicial, columnaInicial)\r\n                true\r\n            } else {\r\n                hacerBT(posicionInicial, filaInicial, columnaInicial)\r\n                false\r\n            }\r\n        }\r\n        return false\r\n    }\r\n\r\n    fun esIdentificadorClase(): Boolean {\r\n        if (caracterActual == '%') {\r\n            var lexema = \"\"\r\n            val filaInicial = filaActual\r\n            val columnaInicial = columnaActual\r\n            val posicionInicial = posicionActual\r\n\r\n            lexema += caracterActual\r\n            obtenerSiguienteCaracter()\r\n            while (caracterActual.isDigit() || caracterActual.isLetter() || caracterActual == '_') {\r\n                lexema += caracterActual\r\n                obtenerSiguienteCaracter()\r\n            }\r\n            return if (caracterActual == '%') {\r\n                lexema += caracterActual\r\n                obtenerSiguienteCaracter()\r\n                almacenarToken(lexema, Categoria.IDENTIFICADOR_CLASE, filaInicial, columnaInicial)\r\n                true\r\n            } else {\r\n                hacerBT(posicionInicial, filaInicial, columnaInicial)\r\n                false\r\n            }\r\n        }\r\n        return false\r\n    }\r\n\r\n    fun esIdentificadorMetodos(): Boolean {\r\n        if (caracterActual == '$') {\r\n            var lexema = \"\"\r\n            val filaInicial = filaActual\r\n            val columnaInicial = columnaActual\r\n            val posicionInicial = posicionActual\r\n\r\n            lexema += caracterActual\r\n            obtenerSiguienteCaracter()\r\n            while (caracterActual.isDigit() || caracterActual.isLetter() || caracterActual == '_') {\r\n                lexema += caracterActual\r\n                obtenerSiguienteCaracter()\r\n            }\r\n            return if (caracterActual == '$') {\r\n                lexema += caracterActual\r\n                obtenerSiguienteCaracter()\r\n                almacenarToken(lexema, Categoria.IDENTIFICADOR_METODO, filaInicial, columnaInicial)\r\n                true\r\n            } else {\r\n                hacerBT(posicionInicial, filaInicial, columnaInicial)\r\n                false\r\n            }\r\n        }\r\n        return false\r\n    }\r\n\r\n    fun esCadenaCaracteres(): Boolean {\r\n        if (caracterActual == '*') {\r\n            var lexema = \"\"\r\n            val filaInicial = filaActual\r\n            val columnaInicial = columnaActual\r\n            val posicionInicial = posicionActual\r\n\r\n            lexema += caracterActual\r\n            obtenerSiguienteCaracter()\r\n            while (caracterActual != finCodigo) {\r\n                lexema += caracterActual\r\n                obtenerSiguienteCaracter()\r\n                if (caracterActual == '*') {\r\n                    lexema += caracterActual\r\n                    obtenerSiguienteCaracter()\r\n                    almacenarToken(lexema, Categoria.CADENA_CARACTERES, filaInicial, columnaInicial)\r\n                    return true\r\n                }\r\n            }\r\n            lexema += caracterActual\r\n            obtenerSiguienteCaracter()\r\n            hacerBT(posicionInicial, filaInicial, columnaInicial)\r\n        }\r\n        return false\r\n    }\r\n\r\n    fun esComentarioBloque(): Boolean {\r\n        if (caracterActual == 'ñ') {\r\n            var lexema = \"\"\r\n            val filaInicial = filaActual\r\n            val columnaInicial = columnaActual\r\n            val posicionInicial = posicionActual\r\n\r\n            lexema += caracterActual\r\n            obtenerSiguienteCaracter()\r\n\r\n            if (caracterActual == '.') {\r\n                lexema += caracterActual\r\n                obtenerSiguienteCaracter()\r\n\r\n                while (caracterActual != finCodigo) {\r\n                    lexema += caracterActual\r\n                    obtenerSiguienteCaracter()\r\n\r\n                    if (caracterActual == '.') {\r\n                        lexema += caracterActual\r\n                        obtenerSiguienteCaracter()\r\n                        if (caracterActual == 'ñ') {\r\n                            lexema += caracterActual\r\n                            obtenerSiguienteCaracter()\r\n                            almacenarToken(lexema, Categoria.COMENTARIO_BLOQUE, filaInicial, columnaInicial)\r\n                            return true\r\n                        } else {\r\n                            lexema += caracterActual\r\n                            obtenerSiguienteCaracter()\r\n                        }\r\n                    }\r\n                }\r\n\r\n            }\r\n            lexema += caracterActual\r\n            obtenerSiguienteCaracter()\r\n            hacerBT(posicionInicial, filaInicial, columnaInicial)\r\n        }\r\n        return false\r\n    }\r\n\r\n    fun esComentarioLinea(): Boolean {\r\n        if (caracterActual == 'ñ') {\r\n            var lexema = \"\"\r\n            val filaInicial = filaActual\r\n            val columnaInicial = columnaActual\r\n\r\n            while (caracterActual != '\\n' && caracterActual != finCodigo) {\r\n                lexema += caracterActual\r\n                obtenerSiguienteCaracter()\r\n            }\r\n            almacenarToken(lexema, Categoria.COMENTARIO_LINEA, filaInicial, columnaInicial)\r\n            return true\r\n        }\r\n\r\n        return false\r\n    }\r\n\r\n    fun esParentesisIzq(): Boolean {\r\n        if (caracterActual == '(') {\r\n            var lexema = \"\"\r\n            val filaInicial = filaActual\r\n            val columnaInicial = columnaActual\r\n            lexema += caracterActual\r\n            obtenerSiguienteCaracter()\r\n            almacenarToken(lexema, Categoria.PARENTESIS, filaInicial, columnaInicial)\r\n            return true\r\n        }\r\n\r\n        return false\r\n    }\r\n\r\n    fun esParentesisDer(): Boolean {\r\n        if (caracterActual == ')') {\r\n            var lexema = \"\"\r\n            val filaInicial = filaActual\r\n            val columnaInicial = columnaActual\r\n\r\n            lexema += caracterActual\r\n            obtenerSiguienteCaracter()\r\n            almacenarToken(lexema, Categoria.PARENTESIS, filaInicial, columnaInicial)\r\n            return true\r\n        }\r\n\r\n        return false\r\n    }\r\n\r\n    fun esLlaveIzq(): Boolean {\r\n        if (caracterActual == '{') {\r\n            var lexema = \"\"\r\n            val filaInicial = filaActual\r\n            val columnaInicial = columnaActual\r\n\r\n            lexema += caracterActual\r\n            obtenerSiguienteCaracter()\r\n\r\n            almacenarToken(lexema, Categoria.LLAVES, filaInicial, columnaInicial)\r\n            return true\r\n\r\n        }\r\n        return false\r\n    }\r\n\r\n    fun esLlaveDer(): Boolean {\r\n        if (caracterActual == '}') {\r\n            var lexema = \"\"\r\n            val filaInicial = filaActual\r\n            val columnaInicial = columnaActual\r\n            lexema += caracterActual\r\n            obtenerSiguienteCaracter()\r\n            almacenarToken(lexema, Categoria.LLAVES, filaInicial, columnaInicial)\r\n            return true\r\n        }\r\n        return false\r\n    }\r\n\r\n    fun esCorcheteIzq(): Boolean {\r\n        if (caracterActual == '[') {\r\n            var lexema = \"\"\r\n            val filaInicial = filaActual\r\n            val columnaInicial = columnaActual\r\n\r\n            lexema += caracterActual\r\n            obtenerSiguienteCaracter()\r\n\r\n            almacenarToken(lexema, Categoria.CORCHETES, filaInicial, columnaInicial)\r\n            return true\r\n        }\r\n        return false\r\n    }\r\n\r\n    fun esCorcheteDer(): Boolean {\r\n        if (caracterActual == ']') {\r\n            var lexema = \"\"\r\n            val filaInicial = filaActual\r\n            val columnaInicial = columnaActual\r\n\r\n            lexema += caracterActual\r\n            obtenerSiguienteCaracter()\r\n\r\n            almacenarToken(lexema, Categoria.CORCHETES, filaInicial, columnaInicial)\r\n            return true\r\n        }\r\n        return false\r\n    }\r\n\r\n    fun esFinSentencia(): Boolean {\r\n        if (caracterActual == '¬') {\r\n            var lexema = \"\"\r\n            val filaInicial = filaActual\r\n            val columnaInicial = columnaActual\r\n            lexema += caracterActual\r\n            obtenerSiguienteCaracter()\r\n            almacenarToken(lexema, Categoria.FIN_SENTENCIA, filaInicial, columnaInicial)\r\n            return true\r\n        }\r\n\r\n        return false\r\n    }\r\n\r\n    fun esComa(): Boolean {\r\n        if (caracterActual == ',') {\r\n            var lexema = \"\"\r\n            val filaInicial = filaActual\r\n            val columnaInicial = columnaActual\r\n\r\n            lexema += caracterActual\r\n            obtenerSiguienteCaracter()\r\n\r\n            almacenarToken(lexema, Categoria.SEPARADOR_COMA, filaInicial, columnaInicial)\r\n            return true\r\n        }\r\n        return false\r\n\r\n    }\r\n\r\n    fun esPunto(): Boolean {\r\n        if (caracterActual == '.') {\r\n            var lexema = \"\"\r\n            val filaInicial = filaActual\r\n            val columnaInicial = columnaActual\r\n            lexema += caracterActual\r\n            obtenerSiguienteCaracter()\r\n\r\n            almacenarToken(lexema, Categoria.SEPARADOR_PUNTO, filaInicial, columnaInicial)\r\n            return true\r\n        }\r\n        return false\r\n    }\r\n\r\n    fun esDosPunto(): Boolean {\r\n        if (caracterActual == ';') {\r\n            var lexema = \"\"\r\n            val filaInicial = filaActual\r\n            val columnaInicial = columnaActual\r\n\r\n            lexema += caracterActual\r\n            obtenerSiguienteCaracter()\r\n\r\n            almacenarToken(lexema, Categoria.SEPARADOR_COMA, filaInicial, columnaInicial)\r\n            return true\r\n        }\r\n        return false\r\n    }\r\n\r\n    fun esPalabraReservada(): Boolean {\r\n        var lexema = \"\"\r\n        val filaInicial = filaActual\r\n        val columnaInicial = columnaActual\r\n        val posicionInicial = posicionActual\r\n\r\n        for (palabra in listaPalabrasReservadas) {\r\n            if (caracterActual == palabra[0]) {\r\n                var centinela = true\r\n                for (caracter in palabra) {\r\n                    if (caracter == caracterActual) {\r\n                        lexema += caracterActual\r\n                        obtenerSiguienteCaracter()\r\n                    } else {\r\n                        centinela = false\r\n                        lexema =\"\"\r\n                        hacerBT(posicionInicial, filaInicial, columnaInicial)\r\n                        break\r\n                    }\r\n                }\r\n                if (centinela) {\r\n                    almacenarToken(lexema, Categoria.PALABRA_RESERVADA, filaInicial, columnaInicial)\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n        return false\r\n    }\r\n\r\n    fun isOperadorAritmetico(): Boolean{\r\n        var lexema = \"\"\r\n        val filaInicial = filaActual\r\n        val columnaInicial = columnaActual\r\n        val posicionInicial = posicionActual\r\n        if (caracterActual == 's' || caracterActual == 'r' || caracterActual == 'm' ||\r\n            caracterActual == 'd' || caracterActual == 'M' || caracterActual == 'P' ||\r\n            caracterActual == 'R'){\r\n\r\n\r\n            lexema+=caracterActual\r\n            obtenerSiguienteCaracter()\r\n            almacenarToken(lexema, Categoria.OPERADOR_ARITMETICO, filaInicial, columnaInicial)\r\n            return true\r\n        }\r\n        return false\r\n    }\r\n\r\n    fun esOperadorRelacional(): Boolean{\r\n        var lexema = \"\"\r\n        val filaInicial = filaActual\r\n        val columnaInicial = columnaActual\r\n        if (caracterActual == '/' || caracterActual.code == 92){\r\n            lexema+=caracterActual\r\n            obtenerSiguienteCaracter()\r\n            if (caracterActual == ':'){\r\n                lexema+=caracterActual\r\n                obtenerSiguienteCaracter()\r\n                almacenarToken(lexema, Categoria.OPERADOR_RELACIONAL, filaInicial, columnaInicial)\r\n                return true\r\n            }else{\r\n                obtenerSiguienteCaracter()\r\n                almacenarToken(lexema, Categoria.OPERADOR_RELACIONAL, filaInicial, columnaInicial)\r\n                return true\r\n            }\r\n        }else if(caracterActual == '|' || caracterActual == ':'){\r\n            lexema+=caracterActual\r\n            obtenerSiguienteCaracter()\r\n            if (caracterActual == ':'){\r\n                lexema+=caracterActual\r\n                obtenerSiguienteCaracter()\r\n                almacenarToken(lexema, Categoria.OPERADOR_RELACIONAL, filaInicial, columnaInicial)\r\n                return true\r\n            }\r\n            return false\r\n        }\r\n        return false\r\n    }\r\n\r\n    fun isOperadorAsignacion(): Boolean{\r\n        if (caracterActual == ':'){\r\n            var lexema = \"\"\r\n            val filaInicial = filaActual\r\n            val columnaInicial = columnaActual\r\n            val posicionInicial = posicionActual\r\n\r\n            lexema+=caracterActual\r\n            obtenerSiguienteCaracter()\r\n            almacenarToken(lexema, Categoria.OPERADOR_RELACIONAL, filaInicial, columnaInicial)\r\n        }\r\n        return false\r\n    }\r\n\r\n    fun esOperadorLogico(): Boolean{\r\n        if (caracterActual == '!' || caracterActual == '¡' || caracterActual == '~') {\r\n            var lexema = \"\"\r\n            val filaInicial = filaActual\r\n            val columnaInicial = columnaActual\r\n\r\n            lexema += caracterActual\r\n            obtenerSiguienteCaracter()\r\n            almacenarToken(lexema, Categoria.OPERADOR_LOGICO, filaInicial, columnaInicial)\r\n            return true\r\n        }\r\n        return false;\r\n    }\r\n\r\n    fun esIncremento(): Boolean{\r\n        if (caracterActual == 's'){\r\n            var lexema = \"\"\r\n            val filaInicial = filaActual\r\n            val columnaInicial = columnaActual\r\n            val posicionInicial = posicionActual\r\n\r\n            lexema+=caracterActual\r\n            obtenerSiguienteCaracter()\r\n            if (caracterActual != 's'){\r\n                hacerBT(posicionInicial,filaInicial,columnaInicial)\r\n            }else {\r\n                lexema+=caracterActual\r\n                almacenarToken(lexema, Categoria.INCREMENTO, filaInicial, columnaInicial)\r\n                obtenerSiguienteCaracter()\r\n                return true\r\n            }\r\n        }\r\n        return false\r\n    }\r\n\r\n    fun esDecremento(): Boolean{\r\n        if (caracterActual == 'r'){\r\n            var lexema = \"\"\r\n            val filaInicial = filaActual\r\n            val columnaInicial = columnaActual\r\n            val posicionInicial = posicionActual\r\n\r\n            lexema+=caracterActual\r\n            obtenerSiguienteCaracter()\r\n            if (caracterActual != 'r'){\r\n                hacerBT(posicionInicial,filaInicial,columnaInicial)\r\n            }else {\r\n                lexema+=caracterActual\r\n                almacenarToken(lexema, Categoria.DECREMENTO, filaInicial, columnaInicial)\r\n                obtenerSiguienteCaracter()\r\n                return true\r\n            }\r\n        }\r\n        return false\r\n    }\r\n\r\n    fun esCaracter(): Boolean\r\n    {\r\n        return false\r\n    }\r\n\r\n    fun obtenerSiguienteCaracter() {\r\n        if (posicionActual == codigoFuente.length - 1) {\r\n            caracterActual = finCodigo\r\n        } else {\r\n            if (caracterActual == '\\n') {\r\n                filaActual++\r\n                columnaActual = 0\r\n            } else {\r\n                columnaActual++\r\n            }\r\n            posicionActual++\r\n            caracterActual = codigoFuente[posicionActual]\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/kotlin/co/edu/uniquindio/compiladores/proyecto/lexico/AnalizadorLexico.kt b/src/main/kotlin/co/edu/uniquindio/compiladores/proyecto/lexico/AnalizadorLexico.kt
--- a/src/main/kotlin/co/edu/uniquindio/compiladores/proyecto/lexico/AnalizadorLexico.kt	(revision 8837f3e9aa1f241b7e3775216163f5baf48ea37b)
+++ b/src/main/kotlin/co/edu/uniquindio/compiladores/proyecto/lexico/AnalizadorLexico.kt	(date 1663390589855)
@@ -517,7 +517,8 @@
                 almacenarToken(lexema, Categoria.OPERADOR_RELACIONAL, filaInicial, columnaInicial)
                 return true
             }
-        }else if(caracterActual == '|' || caracterActual == ':'){
+        }
+        if(caracterActual == '|' || caracterActual == ':'){
             lexema+=caracterActual
             obtenerSiguienteCaracter()
             if (caracterActual == ':'){
